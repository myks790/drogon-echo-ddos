//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "ListParameters.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string ListParameters::genText(const DrTemplateData& ListParameters_view_data)
{
	drogon::OStringStream ListParameters_tmp_stream;
	std::string layoutName{""};
	ListParameters_tmp_stream << "<!DOCTYPE html>\n";
	ListParameters_tmp_stream << "<html>\n";
    auto para=ListParameters_view_data.get<std::unordered_map<std::string,std::string>>("parameters");
	ListParameters_tmp_stream << "<head>\n";
	ListParameters_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	ListParameters_tmp_stream << "    <title>status</title>\n";
	ListParameters_tmp_stream << "</head>\n";
	ListParameters_tmp_stream << "<body>\n";
	ListParameters_tmp_stream << "    <H1>Info</H1>\n";
	ListParameters_tmp_stream << "    <div>cpu : <span id=\"cpu\">";
{
    auto & val=ListParameters_view_data["cpu_info"];
    if(val.type()==typeid(const char *)){
        ListParameters_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        ListParameters_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	ListParameters_tmp_stream << "</span></div>\n";
	ListParameters_tmp_stream << "    <div>mem : <span id=\"mem\">";
{
    auto & val=ListParameters_view_data["mem_info"];
    if(val.type()==typeid(const char *)){
        ListParameters_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        ListParameters_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	ListParameters_tmp_stream << "</span></div>\n";
	ListParameters_tmp_stream << "    <H1>RPS</H1>\n";
	ListParameters_tmp_stream << "    <div>1s : <span id =\"s1\"></span></div>\n";
	ListParameters_tmp_stream << "    <div>1m : <span id =\"m1\"></span></div>\n";
	ListParameters_tmp_stream << "    <div>10m : <span id =\"m10\"></span></div>\n";
ListParameters_tmp_stream<<"\n";
	ListParameters_tmp_stream << "    <canvas id=\"line-chart\" width=\"300\" height=\"250\"></canvas>\n";
	ListParameters_tmp_stream << "    ";
 if(para.size()>0){
	ListParameters_tmp_stream << "    <H1>Parameters</H1>\n";
	ListParameters_tmp_stream << "    <table border=\"1\">\n";
	ListParameters_tmp_stream << "      <tr>\n";
	ListParameters_tmp_stream << "        <th>name</th>\n";
	ListParameters_tmp_stream << "        <th>value</th>\n";
	ListParameters_tmp_stream << "      </tr>\n";
	ListParameters_tmp_stream << "      ";
 for(auto iter:para){
	ListParameters_tmp_stream << "      <tr>\n";
	ListParameters_tmp_stream << "        <td>";
ListParameters_tmp_stream<<iter.first;
	ListParameters_tmp_stream << "</td>\n";
	ListParameters_tmp_stream << "        <td>";
 ListParameters_tmp_stream<<iter.second;
	ListParameters_tmp_stream << "</td>\n";
	ListParameters_tmp_stream << "      </tr>\n";
	ListParameters_tmp_stream << "      ";
}
	ListParameters_tmp_stream << "    </table>\n";
	ListParameters_tmp_stream << "    ";
 }else{
	ListParameters_tmp_stream << "    <H1>no parameter</H1>\n";
	ListParameters_tmp_stream << "    ";
}
	ListParameters_tmp_stream << "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script>\n";
ListParameters_tmp_stream<<"\n";
	ListParameters_tmp_stream << "    <script>\n";
	ListParameters_tmp_stream << "      var data = {\n";
	ListParameters_tmp_stream << "          labels: new Array(60),\n";
	ListParameters_tmp_stream << "          datasets: [{ \n";
	ListParameters_tmp_stream << "              data: new Array(60),\n";
	ListParameters_tmp_stream << "              label: \"cpu\",\n";
	ListParameters_tmp_stream << "              borderColor: \"#3e95cd\",\n";
	ListParameters_tmp_stream << "              fill: false\n";
	ListParameters_tmp_stream << "            }, { \n";
	ListParameters_tmp_stream << "              data: new Array(60),\n";
	ListParameters_tmp_stream << "              label: \"mem\",\n";
	ListParameters_tmp_stream << "              borderColor: \"#8e5ea2\",\n";
	ListParameters_tmp_stream << "              fill: false\n";
	ListParameters_tmp_stream << "            }, { \n";
	ListParameters_tmp_stream << "              data: new Array(60),\n";
	ListParameters_tmp_stream << "              label: \"1s\",\n";
	ListParameters_tmp_stream << "              borderColor: \"#3cba9f\",\n";
	ListParameters_tmp_stream << "              fill: false\n";
	ListParameters_tmp_stream << "            }, { \n";
	ListParameters_tmp_stream << "              data: new Array(60),\n";
	ListParameters_tmp_stream << "              label: \"1m\",\n";
	ListParameters_tmp_stream << "              borderColor: \"#e8c3b9\",\n";
	ListParameters_tmp_stream << "              fill: false\n";
	ListParameters_tmp_stream << "            }, { \n";
	ListParameters_tmp_stream << "              data: new Array(60),\n";
	ListParameters_tmp_stream << "              label: \"10m\",\n";
	ListParameters_tmp_stream << "              borderColor: \"#c45850\",\n";
	ListParameters_tmp_stream << "              fill: false\n";
	ListParameters_tmp_stream << "                }\n";
	ListParameters_tmp_stream << "              ]\n";
	ListParameters_tmp_stream << "            }\n";
	ListParameters_tmp_stream << "      var updateData = function(oldData){\n";
	ListParameters_tmp_stream << "        var labels = oldData[\"labels\"];\n";
	ListParameters_tmp_stream << "        labels.shift();\n";
	ListParameters_tmp_stream << "        var today = new Date();   \n";
	ListParameters_tmp_stream << "        var minutes = ('0' + today.getMinutes()).slice(-2);\n";
	ListParameters_tmp_stream << "        var seconds = ('0' + today.getSeconds()).slice(-2); \n";
	ListParameters_tmp_stream << "        var timeString = minutes  + ':' + seconds;\n";
	ListParameters_tmp_stream << "        labels.push(timeString);\n";
ListParameters_tmp_stream<<"\n";
	ListParameters_tmp_stream << "        fetch('/cpu').then((res)=>res.text()).then((data)=>{\n";
	ListParameters_tmp_stream << "          document.getElementById('cpu').textContent=data+\"%\";\n";
	ListParameters_tmp_stream << "          var dataSetCPU = oldData[\"datasets\"][0][\"data\"];\n";
	ListParameters_tmp_stream << "          dataSetCPU.push(data);\n";
	ListParameters_tmp_stream << "          dataSetCPU.shift();\n";
	ListParameters_tmp_stream << "        })\n";
	ListParameters_tmp_stream << "        fetch('/mem').then((res)=>res.text()).then((data)=>{\n";
	ListParameters_tmp_stream << "          document.getElementById('mem').textContent=data+\"%\";\n";
	ListParameters_tmp_stream << "          var dataSetMEM = oldData[\"datasets\"][1][\"data\"];\n";
	ListParameters_tmp_stream << "          dataSetMEM.push(data);\n";
	ListParameters_tmp_stream << "          dataSetMEM.shift();\n";
	ListParameters_tmp_stream << "        })\n";
	ListParameters_tmp_stream << "        fetch('/rps?q=1s').then((res)=>res.text()).then((data)=>{\n";
	ListParameters_tmp_stream << "          document.getElementById('s1').textContent=data;\n";
	ListParameters_tmp_stream << "          var dataSet1s = oldData[\"datasets\"][2][\"data\"];\n";
	ListParameters_tmp_stream << "          dataSet1s.push(data);\n";
	ListParameters_tmp_stream << "          dataSet1s.shift();\n";
	ListParameters_tmp_stream << "        })\n";
	ListParameters_tmp_stream << "        fetch('/rps?q=1m').then((res)=>res.text()).then((data)=>{\n";
	ListParameters_tmp_stream << "          document.getElementById('m1').textContent=data\n";
	ListParameters_tmp_stream << "          const dataSet1m = oldData[\"datasets\"][3][\"data\"];\n";
	ListParameters_tmp_stream << "          dataSet1m.push(data);\n";
	ListParameters_tmp_stream << "          dataSet1m.shift();\n";
	ListParameters_tmp_stream << "        })\n";
	ListParameters_tmp_stream << "        fetch('/rps?q=10m').then((res)=>res.text()).then((data)=>{\n";
	ListParameters_tmp_stream << "          document.getElementById('m10').textContent=data\n";
	ListParameters_tmp_stream << "          const dataSet10m = oldData[\"datasets\"][4][\"data\"];\n";
	ListParameters_tmp_stream << "          dataSet10m.push(data);\n";
	ListParameters_tmp_stream << "          dataSet10m.shift();\n";
	ListParameters_tmp_stream << "        })\n";
	ListParameters_tmp_stream << "      };\n";
	ListParameters_tmp_stream << "      const chart = new Chart(document.getElementById(\"line-chart\"), {\n";
	ListParameters_tmp_stream << "        type: 'line',\n";
	ListParameters_tmp_stream << "        data: data,\n";
	ListParameters_tmp_stream << "            options: {\n";
	ListParameters_tmp_stream << "              title: {\n";
	ListParameters_tmp_stream << "                display: true,\n";
	ListParameters_tmp_stream << "                text: 'World population per region (in millions)'\n";
	ListParameters_tmp_stream << "              }\n";
	ListParameters_tmp_stream << "            }\n";
	ListParameters_tmp_stream << "          });\n";
	ListParameters_tmp_stream << "      setInterval(function(){\n";
	ListParameters_tmp_stream << "        updateData(data);\n";
	ListParameters_tmp_stream << "        chart.update();\n";
	ListParameters_tmp_stream << "        ;}, 1000\n";
	ListParameters_tmp_stream << "      );\n";
	ListParameters_tmp_stream << "      \n";
	ListParameters_tmp_stream << "    </script>\n";
	ListParameters_tmp_stream << "</body>\n";
	ListParameters_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(ListParameters_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = ListParameters_view_data;
auto str = std::move(ListParameters_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
